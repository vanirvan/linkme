datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    Int     @id @default(autoincrement())
  name  String?
  email String  @unique
  image String?

  accounts   Account[]   @relation("UserAccount")
  links      Link[]      @relation("UserLink")
  linkOrders LinkOrder[] @relation("UserLinkOrder")
  page       Page?       @relation("UserPage")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("users")
}

model Account {
  id                Int    @id @default(autoincrement())
  userId            Int    @map("user_id")
  provider          String
  providerAccountId String @map("provider_account_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation("UserAccount", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Page {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique @map("user_id")
  username String @unique

  user    User      @relation("UserPage", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Visitor Visitor[] @relation("PageVisitor")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("pages")
}

model Link {
  id     Int    @id @default(autoincrement())
  userId Int    @map("user_id")
  title  String
  link   String

  user       User       @relation("UserLink", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  linkOrders LinkOrder? @relation("LinkOrder")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("links")
}

model LinkOrder {
  id     Int @id @default(autoincrement())
  userId Int
  linkId Int @unique
  order  Int

  user User @relation("UserLinkOrder", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  link Link @relation("LinkOrder", fields: [linkId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, order])
  @@map("link_orders")
}

model Visitor {
  id     Int    @id @default(autoincrement())
  pageId Int    @map("page_id")
  ip     String

  page Page @relation("PageVisitor", fields: [pageId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("visitors")
}
